/*- Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів

{
    id: 1,
        name: 'Leanne Graham',
    username: 'Bret',
    email: 'Sincere@april.biz',
    address: {
    street: 'Kulas Light',
        suite: 'Apt. 556',
        city: 'Gwenborough',
        zipcode: '92998-3874',
        geo: {
        lat: '-37.3159',
            lng: '81.1496'
    }
},
    phone: '1-770-736-8031 x56442',
        website: 'hildegard.org',
    company: {
    name: 'Romaguera-Crona',
        catchPhrase: 'Multi-layered client-server neural-net',
        bs: 'harness real-time e-markets'
}
}*/
class Users {
    constructor(id, username, email,
                addressStreet, addressSuite, addressCity, addressZipCode,
                addressGeoLat, addressGeoLng,
                phone, companyName, companyCatchPhrase, companyBS) {
        this.id = id;
        this.username = username;
        this.email =  email;
        this.address = {
            street: addressStreet,
            suite: addressSuite,
            city: addressCity,
            zipcode: addressZipCode,
            geo: {
                lat: addressGeoLat,
                lng: addressGeoLng
            }
        };
        this.phone = phone;
        this.company = {
            name: companyName,
            catchPhrase: companyCatchPhrase,
            bs: companyBS
        };
    }
}

let users = new Users(1, 'Leanne Graham', 'Sincere@april.biz',
    'Kulas Light', 'Apt. 556', 'Gwenborough', '92998-3874',
    '-37.3159', '81.1496',
    '1-770-736-8031 x56442',
    'Romaguera-Crona', 'Multi-layered client-server neural-net', 'harness real-time e-markets');
console.log(users);

/*
-  Створити функцію конструктор / клас  який описує об'єкт тегу
Поля :
    -назва тегу ()
- опис його дій
- масив з атрибутами (2-3 атрибути максимум)
Кожен атрибут описати як окремий який буде містити
-назву атрибуту
-опис дії атрибуту
інформацію брати з htmlbook.ru

Таким чином описати теги
-a
-div
-h1
-span
-input
-form
-option
-select
Приклад результуючого об'єкту
{
    titleOfTag: 'area',
        action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
    attrs: [
    {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
    {/!*some props and values*!/},
    {/!*...*!/},
    {/!*...*!/},
]

}*/
function Attrs(titleOfAttr, actionOfAttr) {
    this.titleOfAttr = titleOfAttr;
    this.actionOfAttr = actionOfAttr;
}

function Tags(titleOfTag, action, ...attrs) {
    this.titleOfTag = titleOfTag;
    this.action = action;
    this.attrs = [...attrs];
}

let attrsHrefA = new Attrs('href', 'Задает адрес документа, на который следует перейти. ');
let attrsTargetA = new Attrs('target', 'По умолчанию, при переходе по ссылке документ открывается в текущем окне или фрейме. При необходимости, это условие может быть изменено атрибутом target тега <a>. ');
let tagA = new Tags('a', 'В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь',
    attrsHrefA, attrsTargetA);
console.log(tagA);


let attrsAlignDiv = new Attrs('align', 'Выравнивание содержимого контейнера <div> по краю. ');
let attrsTitleDiv = new Attrs('title', 'Добавляет поясняющий текст к контейнеру <div> в виде всплывающей подсказки, которая отображается, когда курсор мыши задерживается на содержимом. ');
let tagDiv = new Tags('div', 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора. ',
    attrsAlignDiv, attrsTitleDiv);
console.log(tagDiv);

let attrsAlignH1 = new Attrs('align', 'Выравнивание заголовка текста по краю.');
let tagH1 = new Tags('h1', 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня.  По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.  ',
    attrsAlignH1);
console.log(tagH1);

let attrsHiddenSpan = new Attrs('hidden', 'Скрывает содержимое элемента от просмотра. Такой элемент не отображается на странице, но доступен через скрипты. ');
let attrsContenteditableSpan = new Attrs('contenteditable', 'Сообщает, что элемент доступен для редактирования пользователем — можно удалять текст и вводить новый. Также работают стандартные команды вроде отмены, вставки текста из буфера и др. contenteditable="true | false" ');
let tagSpan = new Tags('span', 'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль. ',
    attrsHiddenSpan, attrsContenteditableSpan);
console.log(tagSpan);

let attrsPlaceholderInput = new Attrs('placeholder', 'Выводит текст внутри поля формы, который исчезает при получении фокуса.  ');
let attrsValueInput = new Attrs('value', 'Определяет значение элемента формы, которое будет отправлено на сервер или получено с помощью клиентских скриптов. На сервер отправляется пара «имя=значение», где имя задается атрибутом name тега <input>, а значение — атрибутом value. ');
let attrsTypeInput = new Attrs('type', 'Сообщает браузеру, к какому типу относится элемент формы.  type="button|checkbox|file|hidden|image|password|radio|reset|submit|text" ');
let tagInput = new Tags('input', 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент <input> не требуется помещать внутрь контейнера <form>, определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает серверная программа, то указывать <form> обязательно. То же самое обстоит и в случае обработки данных с помощью клиентских приложений, например, скриптов на языке JavaScript. ',
    attrsPlaceholderInput, attrsValueInput, attrsTypeInput);
console.log(tagInput);

let attrsActionForm = new Attrs('action', ' Указывает обработчик, к которому обращаются данные формы при их отправке на сервер. В качестве обработчика может выступать CGI-программа или HTML-документ, который включает в себя серверные сценарии (например, Parser). После выполнения обработчиком действий по работе с данными формы он возвращает новый HTML-документ.\n' +
    '\n' +
    'Если атрибут action отсутствует, текущая страница перезагружается, возвращая все элементы формы к их значениям по умолчанию. ');
let attrsNameForm= new Attrs('name', 'Определяет уникальное имя формы. Как правило, имя формы используется для доступа к ее элементам через скрипты. ');
let tagForm = new Tags('form', ' Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению.\n' +
    '\n' +
    'Документ может содержать любое количество форм, но одновременно на сервер может быть отправлена только одна форма. По этой причине данные форм должны быть независимы друг от друга.\n' +
    '\n' +
    'Для отправки формы на сервер используется кнопка Submit, того же можно добиться, если нажать клавишу Enter в пределах формы. Если кнопка Submit отсутствует в форме, клавиша Enter имитирует ее использование. ',
    attrsActionForm, attrsNameForm);
console.log(tagForm);

let attrsDisabledOption = new Attrs('disabled', 'Блокирует элемент списка для его выбора. ');
let attrsValueOtion= new Attrs('value', 'Определяет значение пункта списка, которое будет отправлено на сервер. На сервер отправляется пара «имя=значение», где имя задается атрибутом name тега <select>, а значение — атрибутом value выделенных пунктов списка. Значение может как совпадать с текстом пункта, так быть и самостоятельным. Также атрибут value применяется для получения значений данных через скрипты.  ');
let tagOption = new Tags('option', 'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты. ',
    attrsDisabledOption, attrsValueOtion);
console.log(tagOption);

let attrsSizeSelect = new Attrs('size', 'Устанавливает высоту списка. Если значение атрибута size равно единице, то список превращается в раскрывающийся. При добавлении атрибута multiple к тегу <select> при size="1" список отображается как «крутилка». Во всех остальных случаях получается список с одним или множественным выбором. ');
let attrsAutofocusSelect = new Attrs('autofocus', 'Атрибут autofocus устанавливает, что список получает фокус после загрузки страницы, при этом список становится доступным для выбора пунктов, например, с помощью клавиатуры.  ');
let tagSelect = new Tags('select', 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Каждый пункт создается с помощью тега <option>, который должен быть вложен в контейнер <select>. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты. ',
    attrsSizeSelect, attrsAutofocusSelect);
console.log(tagSelect);